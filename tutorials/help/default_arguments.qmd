---
title: "Default Function Arguments"
knitr:
  opts_chunk:
    cache: false
---

```{r setup, echo = FALSE, include = FALSE}
library(printr)
```

As we alluded to in the [Functions Section](/tutorials/functions/functions.qmd), the *Usage* section of an R documentation
file provides two very important pieces of information about a function's arguments.

1. The order in which the arguments are specified in the function definition.
1. The default values of arguments for which defaults are defined.

## Argument Ordering

When you call an R function, you do not have to explicitly write out the argument names, if you supply the argument
values in the order that the arguments are specified in the function definition. That's a mouthful, so let's look at the
`matrix()` function for a concrete example.

```{r, echo = FALSE, printr.help.sections = c("description", "usage", "arguments")}
?matrix
```

```{r, echo = FALSE, include = FALSE}
detach("package:printr", unload = TRUE)
```

The usage section of `matrix()`'s help file tells use that the function takes five arguments:

1. `data`
1. `nrow`
1. `ncol`
1. `byrow`
1. `dimnames`

Furthermore, we see that these five arguments are specified in the order shown above.

If we explicitly write out the names for all the arguments in our function call, we can specify the argument values in
any order. Hence, the following three lines will produce equivalent results, for example.

```{r}
matrix(data = 1:6, nrow = 3, ncol = 2, byrow = FALSE, dimnames = NULL)
matrix(nrow = 3, ncol = 2, data = 1:6,byrow = FALSE, dimnames = NULL)
matrix(byrow = FALSE, data = 1:6, nrow = 3, ncol = 2, dimnames = NULL)
```

If we provide the argument values in the order they are specified in the function definition, we do not need to write
out the argument names. So, the following function call will produce the same result as the three above.

```{r}
matrix(1:6, 3, 2, FALSE, NULL)
```

We can also mix these two approaches, but we have to provide all unnamed argument values first, and provide them in the
correct order. The following function calls will also produce the same results as above.

```{r}
matrix(1:6, 3, 2, FALSE, dimnames = NULL)
matrix(1:6, 3, 2, byrow = FALSE, dimnames = NULL)
matrix(1:6, 3, dimnames = NULL, byrow = FALSE, ncol = 2)
```

We cannot, however, switch the order of any unnamed argument values. The following code will not reproduce the matrix
created above.

```{r}
## Flip the 'nrow' and 'ncol' arguments
matrix(1:6, 2, 3, FALSE, dimnames = NULL)
```

## Default Values

When the *Usage* section shows a value assigned to a function argument, the value shown is the *default value* for that
function argument. For the `matrix()` function, all five arguments have default values.

1. `data = NA`
1. `nrow = 1`
1. `ncol = 1`
1. `byrow = FALSE`
1. `dimnames = NULL`

When a function argument has a defined default value, we do not need to specify a value for that argument in our function
call: if we don't provide an argument value, the argument takes the default value shown in the documentation.

So, we could technically call the `matrix()` function without specifying any arguments.

```{r}
matrix()
```

Though, the results are rather boring. Since our function call is entirely parameterized by the default arguments, we
get a $1 \times 1$ matrix containing a single missing datum.

In practice, we will almost always specify some argument values, but we will frequently accept some of the default values,
as well. The following is a typical example of calling the `matrix()` function.

```{r}
matrix(1:12, nrow = 4)
```

In the above function call, I've employed two common shortcuts:

1. I didn't name the first argument.
1. I only specified values for the two arguments that I wanted to adjust.
